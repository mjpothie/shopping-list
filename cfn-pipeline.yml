AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Creates serverless code pipeline

Parameters:
  ProjectName:
    Default: sam-project
    Description: The name for the project associated with this pipeline (used to namespace resources)
    Type: String
  GitHubOwner:
    Default: mjpothie
    Description: The owner or organization for the GitHub project
    Type: String
  GitHubRepo:
    Default: shopping-list
    Description: The GitHub repository name
    Type: String
  CodeBuildProject:
    Default: shopping-list
    Description: The CodeBuild Project name
    Type: String
  Parameter1:
    Default: parameter1-value
    Description: parameter1-desc
    Type: String
    
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "CodePipeline Settings"
        Parameters:
          - ProjectName
      - Label:
          default: "GitHub Settings"
        Parameters:
          - GitHubOwner
          - GitHubRepo
          - Parameter1
Resources:
  CloudFormationServiceRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "cloudformation.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  LambdaAccessPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: "LambdaAccessPolicy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          -
            Effect: "Allow"
            Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:GetBucketVersioning'
            Resource:
              - "*"
          -
            Effect: "Allow"
            Action:
              - 's3:PutObject'
            Resource:
              - "arn:aws:s3:::codepipeline*"
          -
            Effect: "Allow"
            Action:
              - 'lambda:*'
            Resource:
              -  "arn:aws:lambda:us-east-1:014542202029:function:*"
          -
            Effect: "Allow"
            Action:
              - 'apigateway:*'
            Resource:
              - "arn:aws:apigateway:us-east-1::*"
          -
            Effect: "Allow"
            Action:
              - 'iam:GetRole'
              - 'iam:CreateRole'
              - 'iam:DeleteRole'
              - 'iam:PutRolePolicy'              
            Resource:
              - "arn:aws:iam::014542202029:role/*"
          -
            Effect: "Allow"
            Action:
              - 'iam:PassRole'           
            Resource:
              - "*"
          -
            Effect: "Allow"
            Action:
              - 'iam:AttachRolePolicy'
              - 'iam:DeleteRolePolicy'
              - 'iam:DetachRolePolicy'            
            Resource:
              - "arn:aws:iam::014542202029:role/*"
          -
            Effect: "Allow"
            Action:
              - 'cloudformation:CreateChangeSet'         
            Resource:
              - "arn:aws:cloudformation:us-east-1:aws:transform/Serverless-2016-10-31"  
          -
            Effect: "Allow"
            Action:
              - 'codedeploy:CreateApplication'         
              - 'codedeploy:DeleteApplication'  
              - 'codedeploy:RegisterApplicationRevision'  
            Resource:
              - "arn:aws:codedeploy:us-east-1:014542202029:application:*"  
          -
            Effect: "Allow"
            Action:
              - 'codedeploy:CreateDeploymentGroup'         
              - 'codedeploy:CreateDeployment'  
              - 'codedeploy:GetDeployment'  
            Resource:
              - "arn:aws:codedeploy:us-east-1:014542202029:deploymentgroup:*"  
          -
            Effect: "Allow"
            Action:
              - 'codedeploy:GetDeploymentConfig'           
            Resource:
              - "arn:aws:codedeploy:us-east-1:014542202029:deploymentconfig:*" 
      Roles:
        - Ref: CloudFormationServiceRole
              
  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AWS-CodePipeline-Service-3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'devicefarm:ListProjects'
                  - 'devicefarm:ListDevicePools'
                  - 'devicefarm:GetRun'
                  - 'devicefarm:GetUpload'
                  - 'devicefarm:CreateUpload'
                  - 'devicefarm:ScheduleRun'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'elasticbeanstalk:*'
                  - 'ec2:*'
                  - 'elasticloadbalancing:*'
                  - 'autoscaling:*'
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'sns:*'
                  - 'cloudformation:*'
                  - 'rds:*'
                  - 'sqs:*'
                  - 'ecs:*'
                Resource: '*'         

  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref 'ArtifactStoreBucket'
        Type: S3
      Name: !Ref 'ProjectName'
      RoleArn: !GetAtt [CodePipelineServiceRole, Arn]
      Stages:
        - Name: GitHubSource
          Actions:
            - Name: AppSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: master
                OAuthToken: ab35a0e39a6a033dbd095a0d7bd359b606bbf314
                # S3Bucket: !ImportValue 'github-to-s3-outputbucket'
                # S3ObjectKey: !Sub '${GitHubOwner}/${GitHubRepo}/${GitHubOwner}_${GitHubRepo}.zip'
              OutputArtifacts:
                - Name: AppSource
              RunOrder: '1'
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: AppSource
              RunOrder: '1'
              
              



